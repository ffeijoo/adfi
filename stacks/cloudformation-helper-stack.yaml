AWSTemplateFormatVersion: "2010-09-09"
Description: "AdFi Helper Stack"

Parameters: 
  ResourcesS3Bucket: 
    Type: "String"
    Description: "Resources Repository Bucket"

Resources:
  PSHelperLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt PSHelperExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
      Code:
        ZipFile: >
          var response = require('cfn-response');
          var aws = require('aws-sdk');

          exports.handler = function(event, context) {
              console.log(event);
              
              var ssm = new aws.SSM();
              var props = event.ResourceProperties;

              var splitStackArn = event.StackId.split(':');
              var region = splitStackArn[3];
              var accountId = splitStackArn[4];

              var stackName = splitStackArn[5].split("/")[1];
              var paramName = props.Name || "cfn-" + stackName + "-" + event.LogicalResourceId;
              var paramArn = "arn:aws:ssm:" + region + ":" + accountId + ":parameter/" + paramName;

              var cb = function(err, resp) {
                  var cfnRespData = { Arn: paramArn, Name: paramName };
                  if (err) {
                      console.log(err);
                      response.send(event, context, response.FAILED, cfnRespData, paramArn);            
                  } else {
                      console.log(resp);
                      response.send(event, context, response.SUCCESS, cfnRespData, paramArn);            
                  }
              };

              if (event.RequestType == "Create") {
                  var params = {
                      Name: paramName,
                      Type: props.Type,
                      Value: props.Value,
                      KeyId: props.KeyId,
                      Overwrite: false
                  };

                  if (props.Description) params.Description = props.Description;
                  if (props.KeyId) params.KeyId = props.KeyId;
                  
                  ssm.putParameter(params, cb);
              } else if (event.RequestType == "Update") {
                  var params = {
                      Name: paramName,
                      Type: props.Type,
                      Value: props.Value,
                      KeyId: props.KeyId,
                      Overwrite: true
                  };

                  if (props.Description) params.Description = props.Description;
                  if (props.KeyId) params.KeyId = props.KeyId;

                  ssm.putParameter(params, cb);
              } else if (event.RequestType == "Delete") {
                  ssm.deleteParameter({ Name: paramName }, cb);
              }
          };
  PSHelperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: PSHelperExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - kms:Encrypt
                Resource: "*"
  GJHelperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GJHelperExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub arn:aws:s3:::${ResourcesS3Bucket}/scripts/*
  GJHelperLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt GJHelperExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
      Code:
        ZipFile: >
          var response = require('cfn-response');
          var aws = require('aws-sdk');

          const s3 = new aws.S3();

          exports.handler = function(event, context) {
            console.log(event);
            
            var props = event.ResourceProperties;
            
            if (event.RequestType == "Create" || event.RequestType == "Update") {
              var generateTemplateString = (function() {
                var cache = {};    
              
                function generateTemplate(template) {
                  var fn = cache[template];
                  if (!fn) {
                    var sanitized = template
                      .replace(/\$\{([\s]*[^;\s\{]+[\s]*)\}/g, function(_, match) {
                        return `\$\{map.${match.trim()}\}`; })
                      .replace(/(\$\{(?!map\.)[^}]+\})/g, '');
                    fn = Function('map', `return \`${sanitized}\``);
                  }
                  return fn;
                }
                return generateTemplate;
              })();

              s3.getObject({
                Bucket: props.S3SourceBucket, Key: props.S3SourceKey }).promise()
              .then(function(data) {
                var scriptMaker = generateTemplateString(data.Body.toString('utf-8'));
                var locationScript = scriptMaker({
                  database: props.GlueDatabase,
                  loc: props.Location,
                  s3target: props.S3DataSinkPath });
                  
                s3.putObject({
                  Body: locationScript, Bucket: props.S3TargetBucket, Key: props.S3TargetKey }).promise()
                .then(function(data) {
                  response.send(event, context, response.SUCCESS);
                });
              });
            } else if (event.RequestType == "Delete") {
              s3.deleteObject({
                Bucket: props.S3TargetBucket, Key: props.S3TargetKey }).promise()
              .then(function(data) {
                response.send(event, context, response.SUCCESS);
              });      
            }
          };

Outputs:
  PSHelperLambda:
    Description: Cloudformation polyfill for SSM parameter store
    Value: !GetAtt PSHelperLambda.Arn
    Export:
      Name: ParameterStoreHelper
  GJHelperLambda:
    Description: Cloudformation polyfill for Glue jobs
    Value: !GetAtt GJHelperLambda.Arn
    Export:
      Name: GlueScriptGeneratorHelper      
  PSHelperExecutionRole:
    Description: IAM Role
    Value: !GetAtt PSHelperExecutionRole.Arn
    Export:
      Name: PSHelperExecutionRole
